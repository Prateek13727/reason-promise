// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Decco = require("decco/src/Decco.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var $$Promise = require("reason-promise/src/js/promise.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var DummyRepo = require("./DummyRepo.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function resolveResult(result, path) {
  if (result.TAG === /* Ok */0) {
    return result._0;
  } else {
    return Pervasives.failwith("failed " + path);
  }
}

var Utils = {
  resolveResult: resolveResult
};

function t_encode(v) {
  return Js_dict.fromArray([[
                "data",
                Decco.listToJson(Decco.intToJson, v.data)
              ]]);
}

function t_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var data = Decco.listFromJson(Decco.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict._0, "data"), null));
  if (data.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              data: data._0
            }
          };
  }
  var e = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

var Data = {
  t_encode: t_encode,
  t_decode: t_decode
};

function country_encode(v) {
  return Js_dict.fromArray([
              [
                "name",
                Decco.stringToJson(v.name)
              ],
              [
                "id",
                Decco.intToJson(v.id)
              ]
            ]);
}

function country_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var name = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
  if (name.TAG === /* Ok */0) {
    var id = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
    if (id.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                name: name._0,
                id: id._0
              }
            };
    }
    var e = id._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".id" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = name._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".name" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function t_encode$1(v) {
  return Js_dict.fromArray([[
                "countries",
                Decco.listToJson(country_encode, v.countries)
              ]]);
}

function t_decode$1(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var countries = Decco.listFromJson(country_decode, Belt_Option.getWithDefault(Js_dict.get(dict._0, "countries"), null));
  if (countries.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              countries: countries._0
            }
          };
  }
  var e = countries._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".countries" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

var Countries = {
  country_encode: country_encode,
  country_decode: country_decode,
  t_encode: t_encode$1,
  t_decode: t_decode$1
};

function place_encode(v) {
  return Js_dict.fromArray([
              [
                "place",
                Decco.stringToJson(v.place)
              ],
              [
                "id",
                Decco.intToJson(v.id)
              ]
            ]);
}

function place_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var place = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "place"), null));
  if (place.TAG === /* Ok */0) {
    var id = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
    if (id.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                place: place._0,
                id: id._0
              }
            };
    }
    var e = id._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".id" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = place._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".place" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function t_encode$2(v) {
  return Js_dict.fromArray([[
                "places",
                Decco.listToJson(place_encode, v.places)
              ]]);
}

function t_decode$2(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var places = Decco.listFromJson(place_decode, Belt_Option.getWithDefault(Js_dict.get(dict._0, "places"), null));
  if (places.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              places: places._0
            }
          };
  }
  var e = places._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".places" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

var Places = {
  place_encode: place_encode,
  place_decode: place_decode,
  t_encode: t_encode$2,
  t_decode: t_decode$2
};

function companyDetails_encode(v) {
  return Js_dict.fromArray([
              [
                "name",
                Decco.stringToJson(v.name)
              ],
              [
                "brand_name",
                Decco.stringToJson(v.brand_name)
              ]
            ]);
}

function companyDetails_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var name = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
  if (name.TAG === /* Ok */0) {
    var brand_name = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "brand_name"), null));
    if (brand_name.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                name: name._0,
                brand_name: brand_name._0
              }
            };
    }
    var e = brand_name._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".brand_name" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = name._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".name" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function t_encode$3(v) {
  return Js_dict.fromArray([[
                "company_details",
                companyDetails_encode(v.company_details)
              ]]);
}

function t_decode$3(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var company_details = companyDetails_decode(Belt_Option.getWithDefault(Js_dict.get(dict._0, "company_details"), null));
  if (company_details.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              company_details: company_details._0
            }
          };
  }
  var e = company_details._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".company_details" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

var CorporateInfo = {
  companyDetails_encode: companyDetails_encode,
  companyDetails_decode: companyDetails_decode,
  t_encode: t_encode$3,
  t_decode: t_decode$3
};

function fetchAllData(param) {
  return $$Promise.mapOk($$Promise.flatMapOk($$Promise.flatMapOk(DummyRepo.fetchData(undefined), (function (json) {
                        var match = resolveResult(t_decode(json), "data");
                        var data = match.data;
                        return $$Promise.mapOk(DummyRepo.fetchCountries(data), (function (json) {
                                      return [
                                              json,
                                              data
                                            ];
                                    }));
                      })), (function (param) {
                    var data = param[1];
                    var match = resolveResult(t_decode$1(param[0]), "countries");
                    var countries = match.countries;
                    var countryIds = Belt_List.map(countries, (function (param) {
                            return param.id;
                          }));
                    return $$Promise.mapOk(DummyRepo.fetchPlaces(countryIds), (function (json) {
                                  return [
                                          json,
                                          data,
                                          countries
                                        ];
                                }));
                  })), (function (param) {
                var match = resolveResult(t_decode$2(param[0]), "places");
                return [
                        param[1],
                        param[2],
                        match.places
                      ];
              }));
}

function fetchDetails(param) {
  return $$Promise.mapOk(DummyRepo.fetchCorporateInfo(undefined), (function (json) {
                return resolveResult(t_decode$3(json), "company_details").company_details;
              }));
}

function execute(param) {
  return $$Promise.Js.get($$Promise.mapError($$Promise.mapOk($$Promise.allOk2(fetchAllData(undefined), fetchDetails(undefined)), (function (param) {
                        var match = param[0];
                        console.log(match[0], match[1], match[2], param[1]);
                        
                      })), (function (prim) {
                    console.log(prim);
                    
                  })), (function (prim) {
                
              }));
}

execute(undefined);

exports.Utils = Utils;
exports.Data = Data;
exports.Countries = Countries;
exports.Places = Places;
exports.CorporateInfo = CorporateInfo;
exports.fetchAllData = fetchAllData;
exports.fetchDetails = fetchDetails;
exports.execute = execute;
/*  Not a pure module */
